ARG CUDA="10.0"
ARG CUDNN="7"
FROM nvidia/cuda:${CUDA}-cudnn${CUDNN}-devel-ubuntu16.04
RUN rm /etc/apt/sources.list.d/cuda.list

RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
# RUN add-apt-repository --remove ppa:whatever/ppa
# RUN apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub
# install basics
# RUN  apt-get update && apt-get install -y --no-install-recommends curl
# WORKDIR /workspace
# RUN apt-key add gpgkey
# # RUN curl -s -L https://nvidia.github.io/libnvidia-container/gpgkey | apt-key add -
RUN mv /etc/apt/sources.list /etc/apt/sources.list.bak
RUN echo  "deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse \n deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse\n \
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse \n \
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse \n \
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse " >> /etc/apt/sources.list
# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse"  

RUN rm -rf /var/lib/apt/lists/* && apt-get clean &&  apt-get update  -y \
 && apt-get install -y apt-utils git curl ca-certificates bzip2 cmake tree htop bmon iotop g++ \
 && apt-get install -y libglib2.0-0 libsm6 libxext6 libxrender-dev wget  zlib1g zlib1g-dev libssl-dev \
 &&  apt-get update -y \
 && rm -rf /var/lib/apt/lists/*
RUN rm -rf /var/lib/apt/lists/* && apt-get clean &&  apt-get update  -y && apt-get install -y software-properties-common 

# 利用Autotools安装python
#  安裝依賴
RUN apt-get install -y libbz2-dev
RUN cd /opt && \
     wget https://mirrors.huaweicloud.com/python/3.6.9/Python-3.6.9.tgz && \
     tar -xvf Python-3.6.9.tgz && \
     cd Python-3.6.9 && \
     ./configure && make  && make install && python3 --version
# RUN add-apt-repository ppa:deadsnakes/ppa  && apt-get update && apt-get install -y python3.6 
# RUN apt install -y python3-venv python3-pip && apt-get clean 
# RUN pip3 install --upgrade pip
# RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.6 1

# 修改pip的下载源
RUN pip3 config set global.index-url https://pypi.douban.com/simple/ && \
    pip3 config set install.trusted-host mirrors.aliyun.com



# 安装基本python包
RUN pip3 install  -i https://pypi.douban.com/simple/ ninja yacs cython matplotlib opencv-python tqdm torch==1.4.0 torchvision==0.5.0 lxml pandas geopandas shapely




ARG CUDA

# install pycocotools
RUN git clone https://github.com/cocodataset/cocoapi.git \
&& cd cocoapi/PythonAPI \
&& python3 setup.py build_ext install

# install PyTorch Detection
ARG FORCE_CUDA="1"
ENV FORCE_CUDA=${FORCE_CUDA}
RUN git clone https://github.com/facebookresearch/maskrcnn-benchmark.git \
&& cd maskrcnn-benchmark \
&& python3 setup.py build develop

# 安裝detectron2
#  升級setuptools
RUN pip3 install -i https://pypi.douban.com/simple/ setuptools==41.0.0
#  安裝
ENV TORCH_CUDA_ARCH_LIST="6.1;7.5"
RUN git clone https://github.com/facebookresearch/detectron2.git \
&& cd detectron2 && python3 setup.py build develop

#RUN pip3 install -I GDAL==2.2.2
#RUN wget https://download.osgeo.org/gdal/2.2.2/gdal-2.2.2.tar.gz \
#        && tar -zxvf gdal-2.2.2.tar.gz  &&  cd gdal-2.2.2/swig/python  \
 #       &&   python3 setup.py  build_ext --gdal-config=/usr/bin/gdal-config \
  #      --include-dirs=/usr/include/ --library-dirs=/usr/lib/ install
#RUN pip3 download GDAL==2.2.2 && tar -xvzf GDAL-2.2.2.tar.gz && cd GDAL-2.2.2 \
 #       && python3 setup.py  build_ext \
        #--gdal-config=/usr/bin/gdal-config \
        # --include-dirs=/usr/include/ \
         #--library-dirs=/usr/lib/ \
 #        && python3 setup.py install
# RUN conda install -y  GDAL
# RUN apt-get update && apt-get install -y gcc-4.9 g++-4.9
# RUN  cd /usr/lib/x86_64-linux-gnu/  && mv libstdc++.so.6 libstdc++.so.6.bk && cp /root/miniconda3/lib/libstdc++.so.6 .
# RUN apt-get install python3-gdal
#RUN pip3 download pygdal==2.2.2.6 && tar -zxvf pygdal-2.2.2.6.tar.gz && 
#RUN cd pygdal-2.2.2.6/ && python3 setup.py


COPY .  /workspace
WORKDIR /workspace

#CMD ["gdalinfo"]

CMD ["python3", "docker_test_gaofen.py"]
